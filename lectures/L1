
### Лекция 1: Введение в объектно-ориентированное программирование (ООП)

#### Приветствие (5 минут)

_Преподаватель:_

Добрый день, студенты! Сегодня мы с вами начинаем курс, посвящённый объектно-ориентированному программированию (ООП). ООП — одна из самых популярных и широко используемых парадигм программирования, которая лежит в основе создания многих сложных программных систем, включая игры, бизнес-приложения и системы управления. Сегодня на первой лекции мы познакомимся с основами ООП, узнаем, где его применяют, и проведём сравнение с другой популярной парадигмой — функциональным программированием.

Если у вас возникнут вопросы по ходу лекции, не стесняйтесь поднимать руку — я буду рад на них ответить. Итак, давайте начнём!

----------

#### Введение в ООП (20 минут)

_Преподаватель:_

Начнём с самого основного: **что такое объектно-ориентированное программирование?**

ООП — это парадигма программирования, в которой программы строятся из **объектов**. Эти объекты представляют сущности из реального мира или абстрактные идеи, и каждый объект может иметь свои **свойства** (или атрибуты) и **поведение** (методы). Проще говоря, объект — это комбинация данных и функций, которые работают с этими данными.

**Пример из жизни**: Представьте машину. Машина — это объект. У машины есть **свойства** — цвет, марка, скорость. И есть **поведение** — машина может ехать, тормозить, ускоряться. В программировании мы создаём объекты, как машины, которые имеют свойства и выполняют действия, соответствующие этим свойствам.

Теперь давайте поговорим о том, почему ООП стало таким популярным. Программы становятся всё сложнее, и писать их в процедурном стиле, как это делалось раньше, становится трудно и неэффективно. ООП помогает структурировать программу так, чтобы каждая её часть была легко понятной, легко модифицируемой и повторно используемой.

Программы, которые вы пишете, могут включать множество объектов: персонажи в играх, товары в магазине, пользователи на сайте и так далее. Объекты могут взаимодействовать друг с другом, как настоящие предметы, что упрощает моделирование реальных процессов в программах.

Теперь я объясню ключевые понятия, которые вам нужно знать для понимания ООП:

1.  **Объекты** — это отдельные экземпляры, которые мы создаём в программе. Например, конкретная машина в автопарке.
2.  **Классы** — это шаблоны или схемы, по которым создаются объекты. Например, класс `Car` описывает, как должны выглядеть и как себя вести все машины.
3.  **Методы** — это действия, которые объекты могут выполнять. Например, машина может ехать или останавливаться.
4.  **Атрибуты** — это данные, которые характеризуют объект. Например, цвет или скорость машины.

----------

#### Области применения ООП (20 минут)

_Преподаватель:_

Теперь, когда мы разобрались, что такое объекты и классы, давайте обсудим, где применяется ООП.

**Игры** — одна из самых очевидных областей. Персонажи в играх, здания, автомобили — всё это объекты с различными свойствами и поведением. Например, в шахматной игре у нас есть объекты шахматных фигур. Каждая фигура имеет свою позицию на доске, и она может двигаться по определённым правилам. Шахматная фигура может быть классом, а конкретные объекты — это пешки, ферзи, ладьи и так далее.

**Корпоративные системы** — такие как системы управления персоналом или заказами в интернет-магазинах. Например, в интернет-магазине у нас есть объекты, представляющие товары, пользователей, заказы. У каждого товара есть цена, описание и количество на складе. Система позволяет взаимодействовать с этими объектами: пользователи могут заказывать товары, товары могут быть добавлены или удалены из корзины, и так далее.

**Моделирование реальных процессов** — в научных исследованиях или инженерии. Например, можно моделировать движение планет в Солнечной системе с использованием объектов, где каждая планета — это объект с массой, скоростью и положением.

ООП помогает сделать программы более интуитивно понятными, особенно если вы работаете над проектами, связанными с реальным миром.

----------

#### Сравнение ООП и функционального программирования (30 минут)

_Преподаватель:_

Теперь давайте сравним ООП с другой парадигмой программирования — **функциональным программированием** (ФП). Это важно, потому что вы должны понимать, какие задачи лучше решать с помощью ООП, а какие — с помощью других подходов.

В функциональном программировании программы состоят из **функций**, которые принимают на вход данные и возвращают результат, не изменяя исходных данных. В ФП нет понятий объектов или состояний, как в ООП. Функции работают независимо от данных, которые они обрабатывают.

**Пример из ООП:** Предположим, у нас есть объект **"Счётчик"**. У него есть атрибут `value`, который хранит текущее значение счётчика, и методы для увеличения или уменьшения этого значения.

csharp

Копировать код

`class Counter {
    public int Value { get; set; }

    public void Increment() {
        Value++;
    }

    public void Decrement() {
        Value--;
    }
}` 

Здесь `Increment()` изменяет внутреннее состояние объекта, увеличивая значение на 1.

**Пример из функционального программирования:** Вместо изменения состояния, вы просто вызываете функцию, которая принимает значение и возвращает новое значение без изменения исходного.

csharp

Копировать код

`int Increment(int value) {
    return value + 1;
}` 

Здесь исходное значение не меняется, и функция просто возвращает новый результат.

**Основные различия:**

-   В ООП объекты хранят данные и могут изменять своё внутреннее состояние, тогда как в функциональном программировании данные неизменяемы.
-   В ООП вы работаете с объектами и их методами, в функциональном программировании — с чистыми функциями, которые не зависят от внешнего состояния.

Итак, **ООП** лучше подходит для задач, где важно отслеживать состояние объектов — например, в играх, бизнес-системах, интерфейсах пользователя. **Функциональное программирование**, напротив, отлично подходит для задач, где нужно работать с преобразованиями данных, особенно в системах с высоким требованием к надёжности и предсказуемости.

----------

#### Простые примеры ООП (20 минут)

_Преподаватель:_

Давайте рассмотрим несколько простых примеров, чтобы лучше понять, как работают классы и объекты в ООП.

**Пример 1: Машина как объект**

Создадим класс `Car`, который описывает машину. У машины есть атрибуты, такие как цвет, марка и скорость, а также методы — начать движение и остановиться.

csharp

Копировать код

`class Car {
    public string Color { get; set; }
    public string Brand { get; set; }
    public int Speed { get; set; }

    public void Start() {
        Console.WriteLine("Машина поехала.");
    }

    public void Stop() {
        Console.WriteLine("Машина остановилась.");
    }
}` 

Теперь мы можем создать объект этого класса:

csharp

Копировать код

`Car myCar = new Car();
myCar.Color = "Красный";
myCar.Brand = "Toyota";
myCar.Start();` 

**Пример 2: Шахматная фигура как объект**

Создадим класс `Piece`, который описывает шахматную фигуру. У фигуры есть позиция на доске и цвет. Она может перемещаться на новую позицию.

csharp

Копировать код

`class Piece {
    public string Color { get; set; }
    public int X { get; set; }
    public int Y { get; set; }

    public void Move(int newX, int newY) {
        X = newX;
        Y = newY;
        Console.WriteLine($"Фигура переместилась на ({newX}, {newY})");
    }
}` 

Мы создадим объект этого класса и переместим его на новое место:

csharp

Копировать код

`Piece rook = new Piece();
rook.Color = "Белый";
rook.Move(0, 5);` 

Эти примеры показывают, как легко можно работать с объектами, если правильно использовать ООП.

----------

#### Заключение и вопросы (10 минут)

_Преподаватель:_

Сегодня мы рассмотрели, что такое ООП, где его можно применять и чем оно отличается от других парадигм программирования, таких как функциональное программирование.

ООП помогает организовать программу вокруг объектов, что делает её понятной и расширяемой. Вы узнали, как объекты могут хранить данные и выполнять действия через методы.

**Теперь у меня к вам несколько вопросов:**

1.  Чем отличается класс от объекта?
2.  Можете ли вы привести примеры объектов из реальной жизни?
3.  В чём преимущество ООП перед функциональным программированием в случае разработки игры?

Если у вас есть вопросы — задавайте! На следующей лекции мы продолжим изучение ООП и поговорим о том, как абстракция помогает упростить проектирование программного обеспечения.

----------

_Прощание:_

Спасибо за внимание, и до встречи на следующей лекции! Не забудьте выполнить задание на дом: написать простой класс на C#, который описывает любой объект из реальной жизни.
